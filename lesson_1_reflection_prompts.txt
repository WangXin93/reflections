Here test push a branch when prompt on bash is master.

How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    Check with a version which can work good, can help me find which line have changed, so the bug can be inferred within those lines.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Having easy access to entire history can help find bugs of new versions withhelp of old safe versions, and can help start from different old versions for functions need.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Manual commit can know why I commit a new node, and neat. Automatically commit can save the commit time to write code to commit and explanations.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Because these file are related.

How can you use the commands git log and git diff to view the history of files?

    I should use git log in a directory and get history log of git, and use git diff with two commit ID to check difference between two commit.

How might using version control make you more confident to make changes that
could break something?

    With version control I can do change with worry about create a uncertain bug, cause I know I can go back to old commidt if now is wrong, and use diff to analyze what induce that bug.

Now that you have your workspace set up, what do you want to try using Git for?

    I want to use git to set different neural networks without worry about break old code.



